local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Settings
local BOX_COLOR = Color3.fromRGB(255, 0, 0)
local BOX_THICKNESS = 1
local BOX_SIZE = Vector3.new(4, 6, 4) -- Width (X), Height (Y), Depth (Z)
local CORNER_FRACTION = 0.25
local MAX_DISTANCE = 300

local ESP = {}

local function getBoxCorners(center)
    local size = BOX_SIZE / 2
    return {
        center + Vector3.new(-size.X,  size.Y, -size.Z),
        center + Vector3.new( size.X,  size.Y, -size.Z),
        center + Vector3.new( size.X,  size.Y,  size.Z),
        center + Vector3.new(-size.X,  size.Y,  size.Z),
        center + Vector3.new(-size.X, -size.Y, -size.Z),
        center + Vector3.new( size.X, -size.Y, -size.Z),
        center + Vector3.new( size.X, -size.Y,  size.Z),
        center + Vector3.new(-size.X, -size.Y,  size.Z),
    }
end

local EDGES = {
    {1,2},{2,3},{3,4},{4,1},
    {5,6},{6,7},{7,8},{8,5},
    {1,5},{2,6},{3,7},{4,8},
}

local function createCornerLines()
    local lines = {}
    for i = 1, (#EDGES * 2) do
        local line = Drawing.new("Line")
        line.Visible = false
        line.Color = BOX_COLOR
        line.Thickness = BOX_THICKNESS
        table.insert(lines, line)
    end
    return lines
end

local function removeLines(lines)
    for _, line in ipairs(lines) do
        pcall(function() line:Remove() end)
    end
end

Players.PlayerRemoving:Connect(function(player)
    if ESP[player] then
        removeLines(ESP[player].lines)
        ESP[player] = nil
    end
end)

local function project(v3)
    local screenPos, onScreen = Camera:WorldToViewportPoint(v3)
    return Vector2.new(screenPos.X, screenPos.Y), onScreen, screenPos.Z
end

RunService.RenderStepped:Connect(function()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart

            -- Distance culling
            if MAX_DISTANCE and (hrp.Position - Camera.CFrame.Position).Magnitude > MAX_DISTANCE then
                if ESP[player] then
                    for _, line in ipairs(ESP[player].lines) do
                        line.Visible = false
                    end
                end
            else
                local corners3D = getBoxCorners(hrp.Position)
                local corners2D = {}
                local anyOnScreen = false
                local anyInFront = false

                for i, corner in ipairs(corners3D) do
                    local v2, onScreen, z = project(corner)
                    corners2D[i] = v2
                    if onScreen then anyOnScreen = true end
                    if z > 0 then anyInFront = true end
                end

                if not anyOnScreen or not anyInFront then
                    if ESP[player] then
                        for _, line in ipairs(ESP[player].lines) do
                            line.Visible = false
                        end
                    end
                else
                    if not ESP[player] then
                        ESP[player] = { lines = createCornerLines() }
                    end

                    local lines = ESP[player].lines
                    local lineIndex = 1
                    for _, edge in ipairs(EDGES) do
                        local ia, ib = edge[1], edge[2]
                        local A, B = corners2D[ia], corners2D[ib]

                        if (A - B).Magnitude <= 0.0001 then
                            lines[lineIndex].Visible = false
                            lines[lineIndex + 1].Visible = false
                            lineIndex = lineIndex + 2
                        else
                            local fullVec = (B - A)
                            local fullLen = fullVec.Magnitude
                            local dir = fullVec.Unit

                            local segLen = fullLen * CORNER_FRACTION

                            lines[lineIndex].From = A
                            lines[lineIndex].To = A + dir * segLen
                            lines[lineIndex].Color = BOX_COLOR
                            lines[lineIndex].Thickness = BOX_THICKNESS
                            lines[lineIndex].Visible = true

                            lines[lineIndex + 1].From = B
                            lines[lineIndex + 1].To = B - dir * segLen
                            lines[lineIndex + 1].Color = BOX_COLOR
                            lines[lineIndex + 1].Thickness = BOX_THICKNESS
                            lines[lineIndex + 1].Visible = true

                            lineIndex = lineIndex + 2
                        end
                    end
                end
            end
        else
            if ESP[player] then
                for _, line in ipairs(ESP[player].lines) do
                    line.Visible = false
                end
            end
        end
    end
end)
