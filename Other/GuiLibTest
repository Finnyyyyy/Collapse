-- GuiLibTest (Single-file, client-side GUI library for exploit environment)
-- Author: Finny y
-- Load with: loadstring(game:HttpGet("https://raw.githubusercontent.com/Finnyyyyy/Collapse/refs/heads/main/Other/GuiLibTest"))()

local Library = {}
Library.__index = Library

-- Auto-correct lowercase method calls (e.g. :tab() becomes :Tab())
setmetatable(Library, {
    __index = function(t, k)
        local alt = k:sub(1,1):upper() .. k:sub(2)
        return rawget(Library, alt)
    end
})

local GuiService = game:GetService("GuiService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CoreGui = (gethui and gethui()) or game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Utility: Create new instance with properties
local function Create(class, props)
    local inst = Instance.new(class)
    for i,v in pairs(props) do
        inst[i] = v
    end
    return inst
end

-- Main GUI Container
local ScreenGui = Create("ScreenGui", {
    Name = "CollapseUI",
    ResetOnSpawn = false,
    ZIndexBehavior = Enum.ZIndexBehavior.Global,
    Parent = CoreGui
})

-- Window Frame
local MainFrame = Create("Frame", {
    Size = UDim2.new(0, 600, 0, 400),
    Position = UDim2.new(0.5, -300, 0.5, -200),
    BackgroundColor3 = Color3.fromRGB(30,30,30),
    BorderSizePixel = 0,
    AnchorPoint = Vector2.new(0.5, 0.5),
    Draggable = true,
    Active = true,
    Parent = ScreenGui
})

-- Top Tab Bar
local TabButtons = Create("Frame", {
    Size = UDim2.new(1, 0, 0, 30),
    BackgroundColor3 = Color3.fromRGB(25,25,25),
    BorderSizePixel = 0,
    Parent = MainFrame
})

local UIListLayout = Create("UIListLayout", {
    FillDirection = Enum.FillDirection.Horizontal,
    HorizontalAlignment = Enum.HorizontalAlignment.Left,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = TabButtons
})

-- Content holder
local TabContentHolder = Create("Frame", {
    Position = UDim2.new(0, 0, 0, 30),
    Size = UDim2.new(1, 0, 1, -30),
    BackgroundTransparency = 1,
    Parent = MainFrame
})

-- Store all tabs
local Tabs = {}

function Library:Tab(name)
    local TabButton = Create("TextButton", {
        Text = name,
        Size = UDim2.new(0, 100, 1, 0),
        BackgroundColor3 = Color3.fromRGB(40,40,40),
        BorderSizePixel = 0,
        TextColor3 = Color3.fromRGB(255,255,255),
        Parent = TabButtons
    })

    local Content = Create("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Visible = false,
        Parent = TabContentHolder
    })

    local Left = Create("Frame", {
        Size = UDim2.new(0.5, -5, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Parent = Content
    })

    local Right = Create("Frame", {
        Size = UDim2.new(0.5, -5, 1, 0),
        Position = UDim2.new(0.5, 5, 0, 0),
        BackgroundTransparency = 1,
        Parent = Content
    })

    local LeftLayout = Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = Left
    })

    local RightLayout = Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = Right
    })

    local TabObj = {
        Sections = {
            ["Left"] = Left,
            ["Right"] = Right
        }
    }

    function TabObj:Section(name)
        local target = self.Sections[name]
        local API = {}

        function API:Toggle(label, default, callback)
            local btn = Create("TextButton", {
                Text = label .. ": " .. (default and "ON" or "OFF"),
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = Color3.fromRGB(50,50,50),
                BorderSizePixel = 0,
                TextColor3 = Color3.fromRGB(255,255,255),
                Parent = target
            })

            local state = default

            btn.MouseButton1Click:Connect(function()
                state = not state
                btn.Text = label .. ": " .. (state and "ON" or "OFF")
                if callback then callback(state) end
            end)
        end

        function API:Button(label, callback)
            local btn = Create("TextButton", {
                Text = label,
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = Color3.fromRGB(70,70,70),
                BorderSizePixel = 0,
                TextColor3 = Color3.fromRGB(255,255,255),
                Parent = target
            })

            btn.MouseButton1Click:Connect(function()
                if callback then callback() end
            end)
        end

        function API:Slider(label, min, max, default, callback)
            local holder = Create("Frame", {
                Size = UDim2.new(1, 0, 0, 40),
                BackgroundTransparency = 1,
                Parent = target
            })

            local labelTxt = Create("TextLabel", {
                Text = label .. ": " .. tostring(default),
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                TextColor3 = Color3.fromRGB(255,255,255),
                Parent = holder
            })

            local slider = Create("TextButton", {
                Text = "",
                Size = UDim2.new(1, 0, 0, 20),
                Position = UDim2.new(0, 0, 0, 20),
                BackgroundColor3 = Color3.fromRGB(100,100,100),
                Parent = holder
            })

            local value = default

            slider.MouseButton1Down:Connect(function()
                local conn
                conn = Mouse.Move:Connect(function()
                    local relX = Mouse.X - slider.AbsolutePosition.X
                    local percent = math.clamp(relX / slider.AbsoluteSize.X, 0, 1)
                    value = math.floor((min + (max - min) * percent) + 0.5)
                    labelTxt.Text = label .. ": " .. tostring(value)
                    if callback then callback(value) end
                end)

                UserInputService.InputEnded:Wait()
                conn:Disconnect()
            end)
        end

        return API
    end

    TabButton.MouseButton1Click:Connect(function()
        for _,tab in pairs(TabContentHolder:GetChildren()) do
            if tab:IsA("Frame") then tab.Visible = false end
        end
        Content.Visible = true
    end)

    Content.Visible = #TabContentHolder:GetChildren() == 1 -- Show first tab by default

    return TabObj
end

return Library